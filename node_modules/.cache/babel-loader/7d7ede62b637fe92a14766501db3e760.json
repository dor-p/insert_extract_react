{"ast":null,"code":"import _classCallCheck from \"/Users/dor/Desktop/react-crud-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dor/Desktop/react-crud-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dor/Desktop/react-crud-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dor/Desktop/react-crud-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dor/Desktop/react-crud-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dor/Desktop/react-crud-admin/src/example4.js\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from \"react\";\nimport Admin from \"./admin.js\";\nimport \"../css/main.css\";\nimport _ from \"lodash\";\nimport Form from \"react-jsonschema-form\";\nimport moment from \"moment\";\nvar data = [{\n  id: 1,\n  name: \"Ken Next\",\n  number: \"08939303003\",\n  address: {\n    street: \"Hallmark Street\"\n  }\n}, {\n  id: 2,\n  name: \"Isa Yoll\",\n  number: \"0908839202\",\n  address: {\n    street: \"Barbican Street\"\n  }\n}, {\n  id: 3,\n  name: \"Jon Snow\",\n  number: \"078890089\",\n  address: {\n    street: \"Hallmark Street\"\n  }\n}, {\n  id: 4,\n  name: \"Tom East\",\n  number: \"07839030300\",\n  address: {\n    street: \"Barbican Street\"\n  }\n}];\n\nvar Example = /*#__PURE__*/function (_Admin) {\n  _inherits(Example, _Admin);\n\n  function Example(props) {\n    var _this;\n\n    _classCallCheck(this, Example);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Example).call(this, props));\n    _this.name = \"Contact\";\n    _this.name_plural = \"Contacts\";\n    _this.list_display_links = [\"name\"];\n    _this.list_display = [\"id\", \"name\", \"number\", \"address.street\", \"now\"];\n    return _this;\n  }\n\n  _createClass(Example, [{\n    key: \"get_queryset\",\n    value: function get_queryset() {\n      return data;\n    }\n  }, {\n    key: \"search\",\n    value: function search(term, queryset) {\n      var filtered_queryset = [];\n\n      var _iterator = _createForOfIteratorHelper(queryset),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var object = _step.value;\n\n          if (object.name.search(new RegExp(term, \"i\")) >= 0) {\n            filtered_queryset.push(object);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return filtered_queryset;\n    }\n  }, {\n    key: \"get_form\",\n    value: function get_form() {\n      var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var schema = {\n        title: this.name,\n        type: \"object\",\n        required: [\"name\"],\n        properties: {\n          id: {\n            type: \"number\",\n            title: \"id\",\n            default: Math.floor(1000 * Math.random()) + 1\n          },\n          name: {\n            type: \"string\",\n            title: \"Name\",\n            default: \"\"\n          },\n          number: {\n            type: \"string\",\n            title: \"Number\",\n            default: \"\"\n          },\n          address: {\n            type: \"object\",\n            title: \"Address\",\n            properties: {\n              street: {\n                type: \"string\",\n                title: \"Street\"\n              }\n            }\n          }\n        }\n      };\n\n      if (!object) {\n        return /*#__PURE__*/React.createElement(Form, {\n          schema: schema,\n          onSubmit: this.form_submit.bind(this),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 14\n          }\n        });\n      } else {\n        return /*#__PURE__*/React.createElement(Form, {\n          schema: schema,\n          formData: object,\n          onSubmit: this.form_submit.bind(this),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 9\n          }\n        });\n      }\n    }\n  }, {\n    key: \"get_header_transforms\",\n    value: function get_header_transforms() {\n      return {\n        name: function name(header) {\n          return \"Contact \" + header;\n        }\n      };\n    }\n  }, {\n    key: \"get_field_transforms\",\n    value: function get_field_transforms() {\n      return {\n        name: function name(content, object) {\n          return content.toLowerCase();\n        }\n      };\n    }\n  }, {\n    key: \"get_extra_fields\",\n    value: function get_extra_fields() {\n      return {\n        now: function now(object, label) {\n          return moment(new Date()).format(\"LLL\");\n        }\n      };\n    }\n  }, {\n    key: \"get_actions\",\n    value: function get_actions() {\n      var _this2 = this;\n\n      return {\n        delete: function _delete(selected_objects) {\n          var total = data.length;\n\n          var _iterator2 = _createForOfIteratorHelper(selected_objects),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var object = _step2.value;\n              data.splice(data.indexOf(object), 1);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          _this2.set_queryset(data);\n\n          _this2.set_total(total - selected_objects.length);\n        }\n      };\n    }\n  }, {\n    key: \"form_submit\",\n    value: function form_submit(form) {\n      var contact = form.formData;\n\n      if (form.edit) {\n        this.state.queryset.splice(this.state.queryset.indexOf(this.state.object), 1, contact);\n        this.response_change();\n      } else {\n        this.state.queryset.push(contact);\n        this.response_add();\n      }\n    }\n  }, {\n    key: \"get_filters\",\n    value: function get_filters() {\n      return {\n        by_street_name: {\n          options: [{\n            value: \"Hallmark Street\",\n            label: \"Hallmark Street\"\n          }, {\n            value: \"Barbican Street\",\n            label: \"Barbican Street\"\n          }],\n          filter_function: function filter_function(option, queryset) {\n            var grouped = _.groupBy(queryset, \"address.street\");\n\n            return _.has(grouped, option.value) ? grouped[option.value] : [];\n          }\n        },\n        by_id: {\n          options: [{\n            value: \"even\",\n            label: \"even\"\n          }, {\n            value: \"odd\",\n            label: \"odd\"\n          }],\n          filter_function: function filter_function(option, queryset) {\n            var grouped = _.groupBy(queryset, function (contact) {\n              return contact.id % 2 == 0 ? \"even\" : \"odd\";\n            });\n\n            return _.has(grouped, option.value) ? grouped[option.value] : [];\n          }\n        }\n      };\n    }\n  }]);\n\n  return Example;\n}(Admin);\n\nexport { Example as default };","map":{"version":3,"sources":["/Users/dor/Desktop/react-crud-admin/src/example4.js"],"names":["React","Admin","_","Form","moment","data","id","name","number","address","street","Example","props","name_plural","list_display_links","list_display","term","queryset","filtered_queryset","object","search","RegExp","push","schema","title","type","required","properties","default","Math","floor","random","form_submit","bind","header","content","toLowerCase","now","label","Date","format","delete","selected_objects","total","length","splice","indexOf","set_queryset","set_total","form","contact","formData","edit","state","response_change","response_add","by_street_name","options","value","filter_function","option","grouped","groupBy","has","by_id"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Admin from \"./admin.js\";\nimport \"../css/main.css\";\nimport _ from \"lodash\";\nimport Form from \"react-jsonschema-form\";\nimport moment from \"moment\";\n\nvar data = [\n  {\n    id: 1,\n    name: \"Ken Next\",\n    number: \"08939303003\",\n    address: { street: \"Hallmark Street\" }\n  },\n  {\n    id: 2,\n    name: \"Isa Yoll\",\n    number: \"0908839202\",\n    address: { street: \"Barbican Street\" }\n  },\n  {\n    id: 3,\n    name: \"Jon Snow\",\n    number: \"078890089\",\n    address: { street: \"Hallmark Street\" }\n  },\n  {\n    id: 4,\n    name: \"Tom East\",\n    number: \"07839030300\",\n    address: { street: \"Barbican Street\" }\n  }\n];\n\nexport default class Example extends Admin {\n  constructor(props) {\n    super(props);\n    this.name = \"Contact\";\n    this.name_plural = \"Contacts\";\n    this.list_display_links = [\"name\"];\n    this.list_display = [\"id\", \"name\", \"number\", \"address.street\", \"now\"];\n  }\n  get_queryset() {\n    return data;\n  }\n  search(term, queryset) {\n    let filtered_queryset = [];\n    for (var object of queryset) {\n      if (object.name.search(new RegExp(term, \"i\")) >= 0) {\n        filtered_queryset.push(object);\n      }\n    }\n    return filtered_queryset;\n  }\n\n  get_form(object = null) {\n    let schema = {\n      title: this.name,\n      type: \"object\",\n      required: [\"name\"],\n      properties: {\n        id: {\n          type: \"number\",\n          title: \"id\",\n          default: Math.floor(1000 * Math.random()) + 1\n        },\n        name: { type: \"string\", title: \"Name\", default: \"\" },\n        number: { type: \"string\", title: \"Number\", default: \"\" },\n        address: {\n          type: \"object\",\n          title: \"Address\",\n          properties: {\n            street: { type: \"string\", title: \"Street\" }\n          }\n        }\n      }\n    };\n    if (!object) {\n      return <Form schema={schema} onSubmit={this.form_submit.bind(this)} />;\n    } else {\n      return (\n        <Form\n          schema={schema}\n          formData={object}\n          onSubmit={this.form_submit.bind(this)}\n        />\n      );\n    }\n  }\n  get_header_transforms() {\n    return {\n      name: function(header) {\n        return \"Contact \" + header;\n      }\n    };\n  }\n  get_field_transforms() {\n    return {\n      name: function(content, object) {\n        return content.toLowerCase();\n      }\n    };\n  }\n  get_extra_fields() {\n    return {\n      now: function(object, label) {\n        return moment(new Date()).format(\"LLL\");\n      }\n    };\n  }\n  get_actions() {\n    return {\n      delete: selected_objects => {\n        let total = data.length;\n        for (let object of selected_objects) {\n          data.splice(data.indexOf(object), 1);\n        }\n        this.set_queryset(data);\n        this.set_total(total - selected_objects.length);\n      }\n    };\n  }\n  form_submit(form) {\n    let contact = form.formData;\n\n    if (form.edit) {\n      this.state.queryset.splice(\n        this.state.queryset.indexOf(this.state.object),\n        1,\n        contact\n      );\n      this.response_change();\n    } else {\n      this.state.queryset.push(contact);\n      this.response_add();\n    }\n  }\n  get_filters() {\n    return {\n      by_street_name: {\n        options: [\n          { value: \"Hallmark Street\", label: \"Hallmark Street\" },\n          { value: \"Barbican Street\", label: \"Barbican Street\" }\n        ],\n        filter_function: (option, queryset) => {\n          let grouped = _.groupBy(queryset, \"address.street\");\n\n          return _.has(grouped, option.value) ? grouped[option.value] : [];\n        }\n      },\n\n      by_id: {\n        options: [\n          { value: \"even\", label: \"even\" },\n          { value: \"odd\", label: \"odd\" }\n        ],\n        filter_function: (option, queryset) => {\n          let grouped = _.groupBy(queryset, contact => {\n            return contact.id % 2 == 0 ? \"even\" : \"odd\";\n          });\n\n          return _.has(grouped, option.value) ? grouped[option.value] : [];\n        }\n      }\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}